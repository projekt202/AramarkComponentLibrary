import { OnInit } from "@angular/core";
import { BranfolderService } from "../../../shared/services/branfolder/branfolder.service";
import { OneTimeService } from "../../../shared/services/one-time/one-time.service";
import { PlatformService } from "../../../shared/services/platform/platform.service";
import { PostService } from "../../../shared/services/post/post.service";
import { ArticleCard } from "../article-card/article-card.model";
import { BannerBarComponentBackgrounds } from "../banner-bar/banner-bar.model";
import { Pages, InfoArtOrBlog, ArtOrBlog, Tabs, InputPost, TabValues, ButtonRelatedPostPagesTabs } from "./related-post-pages-tabs.model";
import * as i0 from "@angular/core";
export declare class RelatedPostPagesTabsComponent implements OnInit {
    private postService;
    private oneTime;
    private ps;
    private bs;
    background: BannerBarComponentBackgrounds;
    articles: InputPost;
    posts: InputPost;
    numPerPage: number;
    button: ButtonRelatedPostPagesTabs;
    tabs: Tabs;
    currentTab: TabValues;
    info: ArtOrBlog;
    rulerLength: number;
    queueToLoad: number[];
    oneTimeKey: string;
    constructor(postService: PostService, oneTime: OneTimeService, ps: PlatformService, bs: BranfolderService);
    ngOnChanges(): void;
    changeTag(idx: number): void;
    getIdOfPage(page?: number): number;
    getAllQueueToLoad(): number[];
    addQueueToLoad(page: number): void;
    removeQueueToLoad(page: number): void;
    getCurrentTab(): TabValues;
    getCurrentTabIdx(): number;
    getTab(currentTab?: TabValues): TabValues;
    getTabInfo(currentTab?: TabValues): InfoArtOrBlog;
    setTabInfo(info: InfoArtOrBlog, currentTab?: TabValues): InfoArtOrBlog;
    getCurrentPageNumber(currentTab?: TabValues): number;
    getPageNumber(page?: number, currentTab?: TabValues): number;
    setPageNumber(page: number): void;
    getPageInfo(page?: number, TabValue?: TabValues): Pages;
    setPageInfo(pageInfo: Pages, page?: number, TabValue?: TabValues): Pages;
    getPageFirstLoad(TabValue?: TabValues): boolean;
    setPageFirstLoad(firstLoad: boolean, TabValue?: TabValues): void;
    getTitle(TabValue?: TabValues): string;
    setTitle(title: string, TabValue?: TabValues): void;
    getPageAfter(page?: number): string | null;
    hasNextPage(): boolean;
    getTotalCount(TabValue?: TabValues): number;
    setTotalCount(totalCount: number, TabValue?: TabValues): void;
    getEnGoToLastPage(TabValue?: TabValues): boolean;
    setEnGoToLastPage(enGoToLastPage: boolean, TabValue?: TabValues): void;
    getDisablePagination(TabValue?: TabValues): boolean;
    setDisablePagination(disablePagination: boolean, TabValue?: TabValues): boolean;
    setHasNextPage(hasNextPage: boolean, page?: number, TabValue?: TabValues): void;
    hasPreviousPage(): boolean;
    setHasPreviousPage(hasPreviousPage: boolean): void;
    getStartCursor(): string;
    setStartCursor(startCursor: string): void;
    getEndCursor(page?: number): string;
    setEndCursor(endCursor: string, page?: number, TabValue?: TabValues): void;
    isLoaded(page?: number, TabValue?: TabValues): boolean;
    setLoaded(loaded: boolean, page?: number, TabValue?: TabValues): void;
    getIdPage(): number;
    disablePaginatorIfThePageIsNotLoaded(): void;
    changePageTo(page: number): void;
    updateRulerLength(page?: number): void;
    changeToNextPage(): void;
    changeToPreviousPage(): void;
    getDefaultPageIfItDoesntExist(): {
        hasPreviousPage: boolean;
        hasNextPage: boolean;
        startCursor: string;
        endCursor: string;
        loaded: boolean;
        alter: null;
        nodes: never[];
    };
    addDefaultPageIfItDoesntExist(page?: number, TabValue?: TabValues): void;
    setNode(pageInfo: ArticleCard, numNode: number, page?: number, TabValue?: TabValues): void;
    changeTab(tab: TabValues): void;
    postLoadlage(): void;
    hasNodes(): boolean;
    getNodes(): ArticleCard[];
    getStylePagination(tabValue: TabValues): {
        visibility: string;
        overflow: string;
        height: string;
        position: string;
    } | {
        visibility?: undefined;
        overflow?: undefined;
        height?: undefined;
        position?: undefined;
    };
    getOneTimeKeyTab(currentTab?: TabValues): string;
    getOneTimeKey(pageNumber?: number, currentTab?: TabValues): string;
    loadPage(_pageToLoad?: number, _tabToLoad?: TabValues): boolean | void;
    getCategories(): string[];
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RelatedPostPagesTabsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RelatedPostPagesTabsComponent, "aus-related-post-pages-tabs", never, { "background": "background"; "articles": "articles"; "posts": "posts"; "numPerPage": "numPerPage"; "button": "button"; }, {}, never, never, false>;
}
