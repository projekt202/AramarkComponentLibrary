{"version":3,"file":"main.58b09375.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;;;;;;;;;;;;;;ACrEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;;;;;;ACjGA;;;;;;AAMA;;;;AAIA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;AAaA;;;AAyBA;;;AAGA;;;AAIA;;;;;;AA4DA","sources":["webpack://@projekt202/aus-design-system/./projects/ngx-aus-design-system/src/lib/blocks/components/location-search/location-search.component.ts","webpack://@projekt202/aus-design-system/./projects/ngx-aus-design-system/src/lib/blocks/components/search/search.component.ts","webpack://@projekt202/aus-design-system/./projects/ngx-aus-design-system/src/lib/shared/services/filters/filters.service.ts","webpack://@projekt202/aus-design-system/./projects/ngx-aus-design-system/src/lib/shared/services/post/post.service.ts"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./location-search.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./location-search.component.scss?ngResource\";\nimport { Component, Input, ViewChild } from \"@angular/core\";\nimport { ChangeDetectorRef } from \"@angular/core\";\nimport { Apollo, gql } from \"apollo-angular\";\nimport { LocationService } from \"../../../shared/services/location-service/location.service\";\nlet LocationSearchComponent = class LocationSearchComponent {\n    constructor(apollo, ls, cd) {\n        this.apollo = apollo;\n        this.ls = ls;\n        this.cd = cd;\n        this.title = \"Aramark Uniform Services Locations\";\n        this.button = {\n            url: \"#\",\n            variant: \"red\",\n            target: \"_blank\",\n            title: \"Request a Quote\",\n        };\n        this.locations = [];\n        this.noResults = false;\n    }\n    findCleanroom() {\n        this.findLocation({ search: \"Cleanroom\" });\n    }\n    findZip(params) {\n        const { zip, city, state, search } = params;\n        // If only the state is provided, we don't need anything else\n        if (state && !zip && !city && !search) {\n            this.findLocation({ zip: \"\", city: \"\", state: state });\n        }\n        else {\n            let search_string = \"\";\n            if (zip) {\n                search_string = \"zipcode\" + zip;\n            }\n            else if (city || state) {\n                if (city) {\n                    search_string += city;\n                }\n                if (city && state) {\n                    search_string += \",\";\n                }\n                if (state) {\n                    search_string += state;\n                }\n            }\n            fetch(\"https://maps.googleapis.com/maps/api/geocode/json?new_forward_geocoder=true&address=\" +\n                search_string +\n                \"&key=AIzaSyBWaX8u3DnZGSFBO1DoKMP3cRHzgQXYWpk\")\n                .then((response) => response.json())\n                .then((data) => {\n                if (data[\"results\"].length) {\n                    let lat = data[\"results\"][0][\"geometry\"].location.lat;\n                    let lng = data[\"results\"][0][\"geometry\"].location.lng;\n                    this.findLocation({\n                        zip: \"\",\n                        city: \"\",\n                        state: \"\",\n                        latitude: lat.toString(),\n                        longitude: lng.toString(),\n                    });\n                }\n                else {\n                    this.noResults = true;\n                }\n            });\n        }\n    }\n    findLocation(params) {\n        this.noResults = false;\n        let { zip, city, state, search, latitude, longitude } = params;\n        this.apollo\n            .query({\n            query: gql `\n          query findLocations(\n            $state: String\n            $search: String\n            $city: String\n            $zipCode: String\n            $longitude: String\n            $latitude: String\n          ) {\n            locations(\n              first: 10\n              where: {\n                search: $search\n                state: $state\n                city: $city\n                zipCode: $zipCode\n                latitude: $latitude\n                longitude: $longitude\n              }\n            ) {\n              edges {\n                node {\n                  id\n                  link\n                  feUrl\n                  postLocation {\n                    locationGoogleMap {\n                      latitude\n                      longitude\n                      city\n                      state\n                      countryShort\n                    }\n                    locationPhone\n                    locationName\n                    locationStreetAddress\n                    locationZipCode\n                  }\n                }\n              }\n            }\n          }\n        `,\n            variables: {\n                ...(zip && { zipCode: zip }),\n                ...(city && { city }),\n                ...(state && { state: this.ls.getStateShortForm(state) }),\n                ...(search && { search }),\n                ...(latitude && { latitude }),\n                ...(longitude && { longitude }),\n            },\n        })\n            .subscribe((res) => {\n            // If no results\n            if (!res.data.locations.edges.length) {\n                this.noResults = true;\n                return;\n            }\n            // Reset locations based on search parameters\n            const _locations = res.data.locations.edges;\n            this.locations = [];\n            _locations.forEach((location) => {\n                this.locations.push({\n                    name: location.node.postLocation.locationName,\n                    address: location.node.postLocation.locationStreetAddress,\n                    city: `${location.node.postLocation.locationGoogleMap.city}, ${this.ls.getStateShortForm(location.node.postLocation.locationGoogleMap.state)}`,\n                    state: this.ls.getStateShortForm(location.node.postLocation.locationGoogleMap.state),\n                    zip: location.node.postLocation.locationZipCode,\n                    phone: location.node.postLocation.locationPhone,\n                    hours: \"Opens 8AM - Closes 5PM\",\n                    coords: {\n                        lat: parseFloat(location.node.postLocation.locationGoogleMap.latitude),\n                        lng: parseFloat(location.node.postLocation.locationGoogleMap.longitude),\n                    },\n                    img: \"\",\n                    url: location.node.feUrl,\n                });\n                this.cd.detectChanges();\n            });\n            const timeout = setTimeout(() => {\n                clearTimeout(timeout);\n                this.map?.showAndFixSidebar();\n            }, 500);\n            // Center map so that it fits all markers\n            if (this.locations.length > 1) {\n                const bounds = new google.maps.LatLngBounds();\n                for (let i = 0; i < this.locations.length; i += 1) {\n                    bounds.extend({\n                        lat: this.locations[i].coords.lat,\n                        lng: this.locations[i].coords.lng,\n                    });\n                }\n                const timeout = setTimeout(() => {\n                    clearTimeout(timeout);\n                    this.map?.getMap().fitBounds(bounds);\n                }, 500);\n            }\n        });\n    }\n};\nLocationSearchComponent.ctorParameters = () => [\n    { type: Apollo },\n    { type: LocationService },\n    { type: ChangeDetectorRef }\n];\nLocationSearchComponent.propDecorators = {\n    title: [{ type: Input }],\n    button: [{ type: Input }],\n    map: [{ type: ViewChild, args: [\"map\",] }]\n};\nLocationSearchComponent = __decorate([\n    Component({\n        selector: \"aus-location-search\",\n        template: __NG_CLI_RESOURCE__0,\n        styles: [__NG_CLI_RESOURCE__1]\n    })\n], LocationSearchComponent);\nexport { LocationSearchComponent };\n","import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./search.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./search.component.scss?ngResource\";\nimport { Component, ElementRef, Input, SecurityContext, ViewChild, } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Apollo, gql } from \"apollo-angular\";\nimport { lastValueFrom } from \"rxjs\";\nimport { FiltersService } from \"../../../shared/services/filters/filters.service\";\nimport { PlatformService } from \"../../../shared/services/platform/platform.service\";\nimport { TypographyService } from \"../../../shared/services/typography/typography.service\";\nlet SearchComponent = class SearchComponent {\n    constructor(route, router, apollo, fs, hostElement, ts, ps, ds) {\n        this.route = route;\n        this.router = router;\n        this.apollo = apollo;\n        this.fs = fs;\n        this.hostElement = hostElement;\n        this.ts = ts;\n        this.ps = ps;\n        this.ds = ds;\n        this.keyword = \"\";\n        this.resultsCategories = [\"Products\", \"Site Results\", \"Newsroom\", \"Locations\"];\n        this.selectedCategory = \"Products\";\n        this.isLoading = true;\n        this.searchTerm = \"\";\n        this.numResults = 0;\n        this.currProdsPage = 0;\n        this.gotInitialKeyword = false;\n        this.results = {\n            products: [],\n            siteResults: [],\n            articles: [],\n            locations: [],\n        };\n        this.noResults = {\n            wysiwyg: \"\",\n            terms: [\n                {\n                    title: \"\",\n                    items: [],\n                },\n            ],\n        };\n        this.parseResult = this.parseResult.bind(this);\n        this.searchTerm = this.keyword || \"\";\n        /* Empty state/No results data */\n        this.apollo\n            .query({\n            query: gql `\n          query getData {\n            acfOptions {\n              optionsTabs {\n                noResultsText\n                listOfTerms {\n                  headline\n                  terms {\n                    term\n                  }\n                }\n              }\n            }\n          }\n        `,\n        })\n            .subscribe((res) => {\n            const { acfOptions: { optionsTabs: { noResultsText, listOfTerms }, }, } = res.data;\n            this.noResults.wysiwyg = noResultsText;\n            listOfTerms.forEach((t) => {\n                this.noResults.terms.push({\n                    title: t.headline,\n                    items: t.terms.map((_t) => _t.term),\n                });\n            });\n        });\n    }\n    ngAfterViewInit() {\n        this.route.queryParams.subscribe((params) => {\n            const kwd = params[\"kwd\"];\n            if (kwd && !this.gotInitialKeyword) {\n                this.gotInitialKeyword = true;\n                this.searchTerm = kwd;\n                this.input?.setValue(kwd);\n                this.getResults();\n            }\n        });\n    }\n    searchByTerm(term) {\n        this.searchTerm = term;\n        this.input?.setValue(term);\n        this.getResults();\n    }\n    async getResults() {\n        if (!this.searchTerm)\n            return;\n        this.keyword = this.searchTerm;\n        this.ts.setText(this.hostElement.nativeElement, \".search__header-title h1.typography\", \"Results for “\" + this.keyword + \"”\");\n        this.numResults = 0;\n        this.isLoading = true;\n        this.selectedCategory = \"Products\";\n        this.tabs?.setActiveIdx(0);\n        this.router.navigate([], {\n            queryParamsHandling: \"merge\",\n            relativeTo: this.route,\n            queryParams: {\n                kwd: this.searchTerm,\n            },\n        });\n        this.currProdsPage = 0;\n        if (this.ps.isServer())\n            return;\n        const query = this.apollo.query({\n            query: gql `\n        query getData($keyword: String!) {\n          searchWP(first: 1000, where: { input: $keyword }) {\n            nodes {\n              ... on Post {\n                id\n                title\n                contentTypeName\n                link\n                excerpt\n              }\n              ... on Product {\n                id\n                title\n                contentTypeName\n                link\n                productId\n                postProduct {\n                  styleId\n                  attributes {\n                    productDescription\n                    productFeatures\n                    productTitle\n                    sizes\n                    legalDisclaimer\n                    productDetails {\n                      color\n                      colorCode\n                      colorname\n                      tag\n                      image {\n                        brandfolderEmbed {\n                          url\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              ... on Location {\n                id\n                title\n                contentTypeName\n                link\n                postLocation {\n                  locationCity\n                  locationName\n                  locationStreetAddress\n                  locationUnitNumber\n                  locationState\n                  locationPhone\n                  locationNumber\n                  locationZipCode\n                  locationGoogleMap {\n                    latitude\n                    longitude\n                  }\n                }\n              }\n              ... on Article {\n                id\n                title\n                contentTypeName\n                link\n              }\n              ... on Page {\n                id\n                title\n                contentTypeName\n                link\n              }\n            }\n          }\n        }\n      `,\n            variables: {\n                keyword: this.searchTerm,\n            },\n        });\n        const res = await lastValueFrom(query);\n        const { nodes: data } = res.data.searchWP;\n        this.results = {\n            products: [],\n            siteResults: [],\n            articles: [],\n            locations: [],\n        };\n        this.productsrow?.setProducts([]);\n        data.forEach(this.parseResult);\n        this.numResults = data.length;\n        this.ts.setText(this.hostElement.nativeElement, \".search__header-intro h3.typography\", this.getNumResults());\n        this.productsrow?.setProducts(this.getPageProducts());\n        this.selectedCategory = this.getResultsCategories()[0];\n        this.isLoading = false;\n    }\n    parseResult(res) {\n        switch (res.contentTypeName) {\n            case \"products\":\n                this.results.products.push(this.fs.parseProduct({\n                    id: \"\",\n                    name: \"\",\n                    details: {\n                        sizes: \"\",\n                        description: \"\",\n                    },\n                    fks: [],\n                    legal: \"\",\n                    tag: \"\",\n                    options: [\n                        {\n                            color: \"\",\n                            colorName: \"\",\n                            imgUrl: \"\",\n                        },\n                    ],\n                }, {\n                    ...res,\n                    services: { edges: [] },\n                    genders: { edges: [] },\n                    attributes: { edges: [] },\n                    materials: { edges: [] },\n                }));\n                break;\n            case \"post\":\n            case \"page\":\n                this.results.siteResults.push({\n                    title: res.title,\n                    description: res.excerpt || \"\",\n                    link: res.link.replace(\"api.aramarkuniform.com\", \"www.aramarkuniform.com\"),\n                });\n                break;\n            case \"articles\":\n                this.results.articles.push({\n                    title: res.title,\n                    description: res.excerpt,\n                    link: res.link.replace(\"api.aramarkuniform.com\", \"www.aramarkuniform.com\"),\n                });\n                break;\n            case \"locations\":\n                this.results.locations.push({\n                    url: res.link.replace(\"api.aramarkuniform.com\", \"www.aramarkuniform.com\"),\n                    name: res.postLocation.locationName,\n                    city: res.postLocation.locationCity,\n                    phone: res.postLocation.locationPhone,\n                    zip: res.postLocation.locationZipCode,\n                    coords: {\n                        lat: res.postLocation.locationGoogleMap.latitude,\n                        lng: res.postLocation.locationGoogleMap.longitude,\n                    },\n                    address: res.postLocation.locationStreetAddress,\n                });\n                break;\n            default:\n                break;\n        }\n    }\n    onKeywordChangeHandler(val) {\n        this.searchTerm = val;\n    }\n    onCategoryChanged(idx) {\n        this.selectedCategory = this.getResultsCategories()[idx];\n        this.currProdsPage = 0;\n    }\n    getExcerpt(text) {\n        if (text.length <= 250)\n            return text;\n        return `${text.substring(0, 259)}...`;\n    }\n    getNumResults() {\n        const label = this.numResults === 1 ? \"result\" : \"results\";\n        return this.numResults + ` ${label}`;\n    }\n    getPaginationConfig() {\n        const total = Math.ceil(this.results.products.length / 12);\n        return {\n            total,\n            size: total >= 4 ? 4 : total,\n        };\n    }\n    onPageHandler(page) {\n        this.currProdsPage = page - 1;\n        this.productsrow?.setProducts(this.getPageProducts());\n    }\n    getPageProducts() {\n        const pageProds = this.results.products.slice(this.currProdsPage * 12, this.currProdsPage * 12 + 12);\n        return pageProds;\n    }\n    getResultsCategories() {\n        const cats = [];\n        if (this.results.products.length) {\n            cats.push(\"Products\");\n        }\n        if (this.results.articles.length) {\n            cats.push(\"Newsroom\");\n        }\n        if (this.results.locations.length) {\n            cats.push(\"Locations\");\n        }\n        if (this.results.siteResults.length) {\n            cats.push(\"Site Results\");\n        }\n        return cats;\n    }\n    getKeyword() {\n        return this.ds.sanitize(SecurityContext.HTML, this.keyword || \"\");\n    }\n};\nSearchComponent.ctorParameters = () => [\n    { type: ActivatedRoute },\n    { type: Router },\n    { type: Apollo },\n    { type: FiltersService },\n    { type: ElementRef },\n    { type: TypographyService },\n    { type: PlatformService },\n    { type: DomSanitizer }\n];\nSearchComponent.propDecorators = {\n    keyword: [{ type: Input }],\n    input: [{ type: ViewChild, args: [\"input\",] }],\n    tabs: [{ type: ViewChild, args: [\"tabs\",] }],\n    productsrow: [{ type: ViewChild, args: [\"productsrow\",] }]\n};\nSearchComponent = __decorate([\n    Component({\n        selector: \"aus-search\",\n        template: __NG_CLI_RESOURCE__0,\n        styles: [__NG_CLI_RESOURCE__1]\n    })\n], SearchComponent);\nexport { SearchComponent };\n","import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { lastValueFrom } from 'rxjs';\nlet FiltersService = class FiltersService {\n    constructor(apollo) {\n        this.apollo = apollo;\n    }\n    getData(ids) {\n        return this.apollo.query({\n            query: gql `\n        query getData(\n          $industries: [ID]\n          $services: [ID]\n          $brands: [ID]\n          $products: [ID]\n        ) {\n          industries(first: 1000, where: { termTaxonomId: $industries }) {\n            edges {\n              node {\n                id\n                name\n                industryId\n              }\n            }\n          }\n          services(first: 1000, where: { termTaxonomId: $services }) {\n            edges {\n              node {\n                id\n                name\n                serviceId\n              }\n            }\n          }\n          brands(first: 1000, where: { termTaxonomId: $brands }) {\n            edges {\n              node {\n                id\n                name\n                brandId\n              }\n            }\n          }\n          products(first: 1000, where: { in: $products }) {\n            edges {\n              node {\n                id\n                title\n                productId\n                postProduct {\n                  styleId\n                  attributes {\n                    productDescription\n                    productFeatures\n                    productTitle\n                    sizes\n                    legalDisclaimer\n                    productDetails {\n                      color\n                      colorCode\n                      colorname\n                      tag\n                      image {\n                        brandfolderEmbed {\n                          url\n                        }\n                      }\n                    }\n                  }\n                }\n                industries {\n                  edges {\n                    node {\n                      id\n                      name\n                      industryId\n                    }\n                  }\n                }\n                services {\n                  edges {\n                    node {\n                      id\n                      name\n                      serviceId\n                    }\n                  }\n                }\n                brands {\n                  edges {\n                    node {\n                      id\n                      name\n                      brandId\n                    }\n                  }\n                }\n                genders {\n                  edges {\n                    node {\n                      id\n                      name\n                      genderId\n                    }\n                  }\n                }\n                attributes {\n                  edges {\n                    node {\n                      id\n                      name\n                      attributeId\n                    }\n                  }\n                }\n                materials {\n                  edges {\n                    node {\n                      id\n                      name\n                      materialId\n                    }\n                  }\n                }\n              }\n            }\n          }\n          acfOptions {\n            optionsTabs {\n              industryThumbnails {\n                associatedIndustry {\n                  id\n                  name\n                  industryId\n                }\n                brandfolderEmbed {\n                  url\n                }\n              }\n              serviceIcons {\n                associatedService {\n                  id\n                  name\n                  serviceId\n                }\n                icon\n              }\n            }\n          }\n        }\n      `,\n            variables: {\n                industries: ids.industries || [''],\n                services: ids.services || [''],\n                brands: ids.brands || [''],\n                products: ids.products || [''],\n            },\n        });\n    }\n    async id2name(id, type) {\n        const query = this.getData({\n            ...(type === 'industry' ? { industries: [id.toString()] } : undefined),\n            ...(type === 'service' ? { services: [id.toString()] } : undefined),\n        });\n        const res = await lastValueFrom(query);\n        const { industries, services } = res.data;\n        if (type === 'industry') {\n            const found = industries.edges.find((i) => i.node.industryId === id);\n            return found?.node.name || '';\n        }\n        if (type === 'service') {\n            const found = services.edges.find((s) => s.node.serviceId === id);\n            return found.node.name || '';\n        }\n        return '';\n    }\n    parseProduct(prod, data) {\n        const { postProduct: { styleId, attributes: attrs }, services, genders, attributes, materials, } = data;\n        prod.id = styleId;\n        prod.name = attrs.productTitle;\n        prod.legal = attrs.legalDisclaimer || '';\n        prod.details = {\n            sizes: attrs.sizes || '',\n            description: `${attrs.productDescription || ''}${attrs.productFeatures || ''}`,\n        };\n        prod.options = attrs.productDetails\n            ? attrs.productDetails.map((pd) => ({\n                imgUrl: pd.image.brandfolderEmbed.url ||\n                    'https://via.placeholder.com/400x400.jpg?text=Product+Image',\n                colorName: pd.colorname || 'Default Color',\n                color: pd.color || '#FFFFFF',\n                tag: pd.tag === 'yes' ? 'NEW' : '',\n            }))\n            : [\n                {\n                    imgUrl: 'https://via.placeholder.com/400x400.jpg?text=Product+Image',\n                    colorName: 'Default Color',\n                    color: '#FFFFFF',\n                },\n            ];\n        if (!prod.fks) {\n            prod.fks = [];\n        }\n        services.edges.forEach((s) => {\n            prod.fks.push(s.node.name);\n        });\n        genders.edges.forEach((g) => {\n            prod.fks.push(g.node.name);\n        });\n        attributes.edges.forEach((a) => {\n            prod.fks.push(a.node.name);\n        });\n        materials.edges.forEach((m) => {\n            prod.fks.push(m.node.name);\n        });\n        return prod;\n    }\n};\nFiltersService.ctorParameters = () => [\n    { type: Apollo }\n];\nFiltersService = __decorate([\n    Injectable({\n        providedIn: 'root',\n    })\n], FiltersService);\nexport { FiltersService };\n","import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nlet PostService = class PostService {\n    constructor(apollo) {\n        this.apollo = apollo;\n    }\n    getPost(slug) {\n        const seoQuery = `\n      seo {\n        title\n        metaDesc\n        metaKeywords\n        opengraphAuthor\n        opengraphDescription\n        twitterTitle\n        twitterDescription\n        opengraphUrl\n        opengraphType\n        opengraphTitle\n        opengraphSiteName\n        opengraphPublisher\n        opengraphPublishedTime\n        opengraphModifiedTime\n        opengraphImage {\n          altText\n          sourceUrl\n        }\n      }\n    `;\n        const basicNodeQuery = `\n      title\n      blocks {\n        aramarkBlock {\n          data\n          name\n          advanced\n        }\n        innerBlocks {\n          aramarkBlock {\n            name\n            data\n            advanced\n          }\n        }\n      }\n      ${seoQuery}\n    `;\n        return this.apollo.query({\n            query: gql `\n        query getPost($slug: String!) {\n          nodeByUri(uri: $slug) {\n            id\n            __typename\n            ... on Page {\n              ${basicNodeQuery}\n              CampaignPageSwitch {\n                campaignPage\n              }\n            }\n            ... on Post {\n              ${basicNodeQuery}\n              date\n            }\n            ... on Article {\n              ${basicNodeQuery}\n              date\n            }\n            ... on Location {\n              ${basicNodeQuery}\n            }\n            ... on Product {\n              postProduct {\n                styleId\n                attributes {\n                  productDescription\n                  productFeatures\n                  productTitle\n                  sizes\n                  legalDisclaimer\n                  productDetails {\n                    color\n                    colorCode\n                    colorname\n                    tag\n                    image {\n                      brandfolderEmbed {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n              ${seoQuery}\n            }\n          }\n          seo {\n            redirects {\n              format\n              origin\n              target\n              type\n            }\n          }\n        }\n      `,\n            variables: {\n                slug,\n            },\n        });\n    }\n    getPostByIds(slug) {\n        const postQuery = `\n      nodes {\n        title\n        date\n        feUrl\n        excerptArticlesAndPosts {\n          brandfolderEmbed {\n            url\n            altText\n            title\n          }\n          writeAnExcerptOptional\n        }\n      }\n    `;\n        return this.apollo.query({\n            query: gql `\n        query getPost($slug: [ID]) {\n          articles(where: {in: $slug}) {\n            ${postQuery}\n          }\n          posts(where: {in: $slug}) {\n            ${postQuery}\n          }\n        }\n      `,\n            variables: {\n                slug,\n            },\n        });\n    }\n    getPostByPages(numPerPage, typePostToLoad = 'articles', after, loadAllTabs = false) {\n        const postQuery = `\n          edges {\n            cursor\n            node {\n              title\n              date\n              feUrl\n              excerptArticlesAndPosts {\n                brandfolderEmbed {\n                  url\n                  altText\n                  title\n                }\n                writeAnExcerptOptional\n              }\n            }\n          } \n    `;\n        let queryBase = `\n        [postTye](first: $first, after: $after) {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          ${postQuery}\n        }\n    `;\n        let query = queryBase.replace('[postTye]', typePostToLoad);\n        if (loadAllTabs) {\n            query += queryBase.replace('[postTye]', typePostToLoad === 'articles' ? 'posts' : 'articles');\n        }\n        let variables = {\n            first: numPerPage,\n            after: after ?? null,\n        };\n        return this.apollo.query({\n            query: gql(`\n        query getPost($first: Int, $after: String) {\n          ${query}\n        }`),\n            variables,\n        });\n    }\n    getMediaLink(id) {\n        return this.apollo.query({\n            query: gql `\n        query getMedia($id: ID!) {\n          mediaItem(id: $id, idType: DATABASE_ID) {\n            link\n          }\n        }\n      `,\n            variables: {\n                id,\n            },\n        });\n    }\n};\nPostService.ctorParameters = () => [\n    { type: Apollo }\n];\nPostService = __decorate([\n    Injectable({\n        providedIn: 'root',\n    })\n], PostService);\nexport { PostService };\n"],"names":[],"sourceRoot":""}